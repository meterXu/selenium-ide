// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Python pytest should export a suite 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

self = type('', (), {})()
self.driver = None
self.delay = 0.3
self.waitTime = 30
self.vars = {}

def valid credentials(driver, parm1, parm2):
  def getDriver():
    time.sleep(self.delay)
    if self.driver is None:
      if driver is None:
        self.driver = webdriver.Chrome()
      else:
        self.driver = driver
      self.driver.implicitly_wait(self.waitTime)
    return self.driver
    
  self.getDriver = getDriver
  try:
    self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
    self.getDriver().set_window_size(1440, 1177)
    self.getDriver().find_element(By.ID, \\"username\\").clear()
    self.getDriver().find_element(By.ID, \\"username\\").send_keys(parm1)
    self.getDriver().find_element(By.ID, \\"password\\").clear()
    self.getDriver().find_element(By.ID, \\"password\\").send_keys(parm2)
    self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
    assert self.getDriver().find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"
  except Exception as Error:
    print(Error)
  return self
  
def invalid credentials(driver):
  def getDriver():
    time.sleep(self.delay)
    if self.driver is None:
      if driver is None:
        self.driver = webdriver.Chrome()
      else:
        self.driver = driver
      self.driver.implicitly_wait(self.waitTime)
    return self.driver
    
  self.getDriver = getDriver
  try:
    self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
    self.getDriver().set_window_size(1440, 1177)
    self.getDriver().find_element(By.ID, \\"username\\").clear()
    self.getDriver().find_element(By.ID, \\"username\\").send_keys(\\"blah\\")
    self.getDriver().find_element(By.ID, \\"password\\").clear()
    self.getDriver().find_element(By.ID, \\"password\\").send_keys(\\"blah\\")
    self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
    assert self.getDriver().find_element(By.ID, \\"flash\\").text == \\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"
  except Exception as Error:
    print(Error)
  return self
  
"
`;

exports[`Code Export Python pytest should export a test 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

self = type('', (), {})()
self.driver = None
self.delay = 0.3
self.waitTime = 30
self.vars = {}

def login(driver, parm1, parm2, parm3):
  def getDriver():
    time.sleep(self.delay)
    if self.driver is None:
      if driver is None:
        self.driver = webdriver.Chrome()
      else:
        self.driver = driver
      self.driver.implicitly_wait(self.waitTime)
    return self.driver
    
  self.getDriver = getDriver
  try:
    self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
    self.getDriver().set_window_size(1440, 1177)
    self.getDriver().find_element(By.XPATH, \\"//input[@id=\\\\'\\"+parm1+\\"\\\\']\\").click()
    self.getDriver().find_element(By.ID, \\"username\\").clear()
    self.getDriver().find_element(By.ID, \\"username\\").send_keys(parm2)
    self.getDriver().find_element(By.ID, \\"password\\").clear()
    self.getDriver().find_element(By.ID, \\"password\\").send_keys(parm3)
    self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
    assert self.getDriver().find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"
  except Exception as Error:
    print(Error)
  return self
  
"
`;
