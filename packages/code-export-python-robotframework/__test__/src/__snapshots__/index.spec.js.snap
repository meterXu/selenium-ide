// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Python pytest should export a suite 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
  def runCase(self):
      self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
      self.getDriver().set_window_size(1440, 1177)
      self.getDriver().find_element(By.ID, \\"username\\").send_keys(\\"tomsmith\\")
      self.getDriver().find_element(By.ID, \\"password\\").send_keys(\\"SuperSecretPassword!\\")
      self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
                                                            assert self.getDriver().find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"
  
  def runCase(self):
      self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
      self.getDriver().set_window_size(1440, 1177)
      self.getDriver().find_element(By.ID, \\"username\\").send_keys(\\"blah\\")
      self.getDriver().find_element(By.ID, \\"password\\").send_keys(\\"blah\\")
      self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
                                                            assert self.getDriver().find_element(By.ID, \\"flash\\").text == \\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"
  
"
`;

exports[`Code Export Python pytest should export a suite that uses control flow commands 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

def test_controlflowif():
    self = type('test',(), {})()
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.vars[\\"myVar\\"] = self.driver.execute_script(\\"return 'a'\\")
    if self.driver.execute_script(\\"return (arguments[0] === 'a')\\", self.vars[\\"myVar\\"]):
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'a'\\")
    elif self.driver.execute_script(\\"return (arguments[0] === 'b')\\", self.vars[\\"myVar\\"]):
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'b'\\")
    else:
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'c'\\")
    assert(self.vars[\\"output\\"] == \\"a\\")
def test_controlflowelseif():
    self = type('test',(), {})()
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.vars[\\"myVar\\"] = self.driver.execute_script(\\"return 'b'\\")
    if self.driver.execute_script(\\"return (arguments[0] === 'a')\\", self.vars[\\"myVar\\"]):
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'a'\\")
    elif self.driver.execute_script(\\"return (arguments[0] === 'b')\\", self.vars[\\"myVar\\"]):
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'b'\\")
    else:
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'c'\\")
    assert(self.vars[\\"output\\"] == \\"b\\")
def test_controlflowelse():
    self = type('test',(), {})()
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.vars[\\"myVar\\"] = self.driver.execute_script(\\"return 'c'\\")
    if self.driver.execute_script(\\"return (arguments[0] === 'a')\\", self.vars[\\"myVar\\"]):
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'a'\\")
    elif self.driver.execute_script(\\"return (arguments[0] === 'b')\\", self.vars[\\"myVar\\"]):
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'b'\\")
    else:
      self.vars[\\"output\\"] = self.driver.execute_script(\\"return 'c'\\")
    assert(self.vars[\\"output\\"] == \\"c\\")
def test_controlflowdo():
    self = type('test',(), {})()
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.vars[\\"check\\"] = self.driver.execute_script(\\"return 1\\")
    condition = True
    while condition:
      self.vars[\\"check\\"] = self.driver.execute_script(\\"return arguments[0] + 1\\", self.vars[\\"check\\"])
      condition = self.driver.execute_script(\\"return (arguments[0] < 3)\\", self.vars[\\"check\\"])
    assert(self.vars[\\"check\\"] == 3)
def test_controlflowtimes():
    self = type('test',(), {})()
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.vars[\\"check\\"] = self.driver.execute_script(\\"return 1\\")
    for i in range(0, 2):
      self.vars[\\"check\\"] = self.driver.execute_script(\\"return arguments[0] + 1\\", self.vars[\\"check\\"])
    assert(self.vars[\\"check\\"] == 3)
def test_controlflowwhile():
    self = type('test',(), {})()
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.vars[\\"check\\"] = self.driver.execute_script(\\"return 1\\")
    while self.driver.execute_script(\\"return (arguments[0] < 3)\\", self.vars[\\"check\\"]):
      self.vars[\\"check\\"] = self.driver.execute_script(\\"return arguments[0] + 1\\", self.vars[\\"check\\"])
    assert(self.vars[\\"check\\"] == 3)
"
`;

exports[`Code Export Python pytest should export a suite with a reused test method 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
  def login(self):
    self.getDriver().get(\\"https://the-internet.herokuapp.com/\\")
    self.getDriver().find_element(By.LINK_TEXT, \\"Form Authentication\\").click()
    self.getDriver().find_element(By.ID, \\"username\\").send_keys(self.vars[\\"username\\"])
    self.getDriver().find_element(By.ID, \\"password\\").send_keys(self.vars[\\"password\\"])
    self.getDriver().find_element(By.CSS_SELECTOR, \\".fa\\").click()
  
  def runCase(self):
      self.vars[\\"username\\"] = \\"blah\\"
      self.vars[\\"password\\"] = \\"blah\\"
      self.login()
  
  def runCase(self):
      self.vars[\\"username\\"] = \\"tomsmith\\"
      self.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
      self.login()
  
"
`;

exports[`Code Export Python pytest should export a suite with commands that open a new window inside of a reused test method 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.getDriver().window_handles
    wh_then = self.vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def selectwindow(self):
    self.getDriver().get(\\"http://the-internet.herokuapp.com/windows\\")
    self.vars[\\"window_handles\\"] = self.getDriver().window_handles
    self.getDriver().find_element(By.LINK_TEXT, \\"Click Here\\").click()
    self.vars[\\"win9425\\"] = self.wait_for_window(2000)
    self.getDriver().switch_to.window(self.vars[\\"win9425\\"])
    assert self.getDriver().title == \\"\\"New Window\\"\\"
  
  def runCase(self):
      self.selectwindow()
  
"
`;

exports[`Code Export Python pytest should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.getDriver().window_handles
    wh_then = self.vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def selectwindow(self):
    self.getDriver().get(\\"http://the-internet.herokuapp.com/windows\\")
    self.vars[\\"window_handles\\"] = self.getDriver().window_handles
    self.getDriver().find_element(By.LINK_TEXT, \\"Click Here\\").click()
    self.vars[\\"win9425\\"] = self.wait_for_window(2000)
    self.getDriver().switch_to.window(self.vars[\\"win9425\\"])
    assert self.getDriver().title == \\"\\"New Window\\"\\"
  
  def runCase(self):
      self.selectwindow()
  
  def runCase(self):
      self.getDriver().get(\\"http://the-internet.herokuapp.com/windows\\")
      self.vars[\\"window_handles\\"] = self.getDriver().window_handles
      self.getDriver().find_element(By.LINK_TEXT, \\"Click Here\\").click()
      self.vars[\\"win9425\\"] = self.wait_for_window(2000)
      self.getDriver().switch_to.window(self.vars[\\"win9425\\"])
      assert self.getDriver().title == \\"\\"New Window\\"\\"
  
"
`;

exports[`Code Export Python pytest should export a test 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
    def runCase(self):
      self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
      self.getDriver().set_window_size(1440, 1177)
      self.getDriver().find_element(By.ID, \\"username\\").send_keys(\\"tomsmith\\")
      self.getDriver().find_element(By.ID, \\"password\\").send_keys(\\"SuperSecretPassword!\\")
      self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
                                                            assert self.getDriver().find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"
    
jetRpa = JetRPA()
jetRpa.runCase()
jetRpa.quitCase()"
`;

exports[`Code Export Python pytest should export a test with a reused test method 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
  def login(self):
    self.getDriver().get(\\"https://the-internet.herokuapp.com/\\")
    self.getDriver().find_element(By.LINK_TEXT, \\"Form Authentication\\").click()
    self.getDriver().find_element(By.ID, \\"username\\").send_keys(self.vars[\\"username\\"])
    self.getDriver().find_element(By.ID, \\"password\\").send_keys(self.vars[\\"password\\"])
    self.getDriver().find_element(By.CSS_SELECTOR, \\".fa\\").click()
  
    def runCase(self):
      self.vars[\\"username\\"] = \\"tomsmith\\"
      self.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
      self.login()
    
jetRpa = JetRPA()
jetRpa.runCase()
jetRpa.quitCase()"
`;

exports[`Code Export Python pytest should export a test with commands that open a new window 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.getDriver().window_handles
    wh_then = self.vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
    def runCase(self):
      self.getDriver().get(\\"http://the-internet.herokuapp.com/\\")
      self.getDriver().set_window_size(1260, 1027)
      self.getDriver().find_element(By.LINK_TEXT, \\"Multiple Windows\\").click()
      self.vars[\\"window_handles\\"] = self.getDriver().window_handles
      self.getDriver().find_element(By.LINK_TEXT, \\"Click Here\\").click()
      self.vars[\\"win9625\\"] = self.wait_for_window(2000)
      self.vars[\\"root\\"] = self.getDriver().current_window_handle
      self.getDriver().switch_to.window(self.vars[\\"win9625\\"])
      assert self.getDriver().title == \\"\\"New Window\\"\\"
      self.getDriver().switch_to.window(self.vars[\\"root\\"])
      assert self.getDriver().title == \\"\\"The Internet\\"\\"
    
jetRpa = JetRPA()
jetRpa.runCase()
jetRpa.quitCase()"
`;

exports[`Code Export Python pytest should export a test with grid execution 1`] = `
"# Generated by JetRecord
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class JetRPA(object):
    driver = None
    
    def getDriver(self):
      time.sleep(0.3)
      if self.driver is None:
        self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub', desired_capabilities=DesiredCapabilities.FIREFOX)
        self.driver.implicitly_wait(3000)
      return self.driver
  
    def quitCase(self, method):
      self.driver.quit()
  
    def runCase(self):
      self.getDriver().get(\\"http://the-internet.herokuapp.com/login\\")
      self.getDriver().set_window_size(1440, 1177)
      self.getDriver().find_element(By.ID, \\"username\\").send_keys(\\"tomsmith\\")
      self.getDriver().find_element(By.ID, \\"password\\").send_keys(\\"SuperSecretPassword!\\")
      self.getDriver().find_element(By.CSS_SELECTOR, \\"#login button\\").click()
                                                            assert self.getDriver().find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"
    
jetRpa = JetRPA()
jetRpa.runCase()
jetRpa.quitCase()"
`;
