// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Python pytest should export a suite 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s



    [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/login    \${BROWSER}
    ...    AND    Set Selenium Speed    \${SELSPEED}
    Set Window Size    1440    1177
    Wait Until Element Is Visible    id:username    3000
    Input Text    id:username    tomsmith
    Wait Until Element Is Visible    id:password    3000
    Input Text    id:password    SuperSecretPassword!
    Wait Until Element Is Visible    css:#login button    3000
    Click Element    css:#login button
    Wait Until Element Is Visible    css:.flash.success    3000
    Element Should Contain    css:.flash.success    You logged into a secure area!\\\\\\\\\\\\\\\\n×


    [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/login    \${BROWSER}
    ...    AND    Set Selenium Speed    \${SELSPEED}
    Set Window Size    1440    1177
    Wait Until Element Is Visible    id:username    3000
    Input Text    id:username    blah
    Wait Until Element Is Visible    id:password    3000
    Input Text    id:password    blah
    Wait Until Element Is Visible    css:#login button    3000
    Click Element    css:#login button
    Wait Until Element Is Visible    id:flash    3000
    Element Should Contain    id:flash    Your username is invalid!\\\\\\\\\\\\\\\\n×
"
`;

exports[`Code Export Python pytest should export a suite that uses control flow commands 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s



    \${myVar}=    Execute Javascript    return 'a'
    Log    \${myVar}
    \${condition}=    Execute Javascript    return arguments[0] === 'a'    \${myVar}
    Run Keyword if    \${condition}
    \${output}=    Execute Javascript    return 'a'
    Log    \${output}
    ELSE IF    Execute Javascript    return arguments[0] === 'b'    \${myVar}:
    \${output}=    Execute Javascript    return 'b'
    Log    \${output}
    ELSE
    \${output}=    Execute Javascript    return 'c'
    Log    \${output}
    Should Be Equal    \${output}    a


    \${myVar}=    Execute Javascript    return 'b'
    Log    \${myVar}
    \${condition}=    Execute Javascript    return arguments[0] === 'a'    \${myVar}
    Run Keyword if    \${condition}
    \${output}=    Execute Javascript    return 'a'
    Log    \${output}
    ELSE IF    Execute Javascript    return arguments[0] === 'b'    \${myVar}:
    \${output}=    Execute Javascript    return 'b'
    Log    \${output}
    ELSE
    \${output}=    Execute Javascript    return 'c'
    Log    \${output}
    Should Be Equal    \${output}    b


    \${myVar}=    Execute Javascript    return 'c'
    Log    \${myVar}
    \${condition}=    Execute Javascript    return arguments[0] === 'a'    \${myVar}
    Run Keyword if    \${condition}
    \${output}=    Execute Javascript    return 'a'
    Log    \${output}
    ELSE IF    Execute Javascript    return arguments[0] === 'b'    \${myVar}:
    \${output}=    Execute Javascript    return 'b'
    Log    \${output}
    ELSE
    \${output}=    Execute Javascript    return 'c'
    Log    \${output}
    Should Be Equal    \${output}    c


    \${check}=    Execute Javascript    return 1
    Log    \${check}
    condition = True
    while condition:
      \${check}=    Execute Javascript    return arguments[0] + 1        \${check}
      Log    \${check}
      condition = Execute Javascript    return arguments[0] < 3    \${check}
      Should Be Equal    \${check}    3


    \${check}=    Execute Javascript    return 1
    Log    \${check}
    :FOR \${i} IN RANGE    0    2
    \\\\
      \${check}=    Execute Javascript    return arguments[0] + 1        \${check}
      Log    \${check}
      Should Be Equal    \${check}    3


    \${check}=    Execute Javascript    return 1
    Log    \${check}
    while Execute Javascript    return arguments[0] < 3    \${check}:
      \${check}=    Execute Javascript    return arguments[0] + 1        \${check}
      Log    \${check}
      Should Be Equal    \${check}    3
"
`;

exports[`Code Export Python pytest should export a suite with a reused test method 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s



  [Setup]    Run Keywords    Open Browser    https://the-internet.herokuapp.com/    \${BROWSER}
  ...    AND    Set Selenium Speed    \${SELSPEED}
  [object Object]
  [object Object]
  [object Object]
  [object Object]



    \${username} = \\"blah\\"
    \${password} = \\"blah\\"
    self.login()


    \${username} = \\"tomsmith\\"
    \${password} = \\"SuperSecretPassword!\\"
    self.login()
"
`;

exports[`Code Export Python pytest should export a suite with commands that open a new window inside of a reused test method 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s

def wait_for_window(self, timeout = 2):
  time.sleep(round(timeout / 1000))
  wh_now = self.driver.window_handles
  wh_then = self.vars[\\"window_handles\\"]
  if len(wh_now) > len(wh_then):
  return set(wh_now).difference(set(wh_then)).pop()



  [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/windows    \${BROWSER}
  ...    AND    Set Selenium Speed    \${SELSPEED}
  self.vars[\\"window_handles\\"] = self.driver.window_handles
  [object Object]
  self.vars[\\"win9425\\"] = self.wait_for_window(2000)
  Switch Window    \${win9425}
  assert self.driver.title == \\"New Window\\"



    self.selectwindow()
"
`;

exports[`Code Export Python pytest should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s

def wait_for_window(self, timeout = 2):
  time.sleep(round(timeout / 1000))
  wh_now = self.driver.window_handles
  wh_then = self.vars[\\"window_handles\\"]
  if len(wh_now) > len(wh_then):
  return set(wh_now).difference(set(wh_then)).pop()



  [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/windows    \${BROWSER}
  ...    AND    Set Selenium Speed    \${SELSPEED}
  self.vars[\\"window_handles\\"] = self.driver.window_handles
  [object Object]
  self.vars[\\"win9425\\"] = self.wait_for_window(2000)
  Switch Window    \${win9425}
  assert self.driver.title == \\"New Window\\"



    self.selectwindow()


    [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/windows    \${BROWSER}
    ...    AND    Set Selenium Speed    \${SELSPEED}
    self.vars[\\"window_handles\\"] = self.driver.window_handles
    [object Object]
    self.vars[\\"win9425\\"] = self.wait_for_window(2000)
    Switch Window    \${win9425}
    assert self.driver.title == \\"New Window\\"
"
`;

exports[`Code Export Python pytest should export a test 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s

*** Test Cases ***
login


    [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/login    \${BROWSER}
    ...    AND    Set Selenium Speed    \${SELSPEED}
    Set Window Size    1440    1177
    Wait Until Element Is Visible    id:username    3000
    Input Text    id:username    tomsmith
    Wait Until Element Is Visible    id:password    3000
    Input Text    id:password    SuperSecretPassword!
    Wait Until Element Is Visible    css:#login button    3000
    Click Element    css:#login button
    Wait Until Element Is Visible    css:.flash.success    3000
    Element Should Contain    css:.flash.success    You logged into a secure area!\\\\\\\\\\\\\\\\n×
"
`;

exports[`Code Export Python pytest should export a test with a reused test method 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s

*** Test Cases ***
valid credentials


  [Setup]    Run Keywords    Open Browser    https://the-internet.herokuapp.com/    \${BROWSER}
  ...    AND    Set Selenium Speed    \${SELSPEED}
  [object Object]
  [object Object]
  [object Object]
  [object Object]



    \${username} = \\"tomsmith\\"
    \${password} = \\"SuperSecretPassword!\\"
    self.login()
"
`;

exports[`Code Export Python pytest should export a test with commands that open a new window 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s

*** Test Cases ***
select window
def wait_for_window(self, timeout = 2):
  time.sleep(round(timeout / 1000))
  wh_now = self.driver.window_handles
  wh_then = self.vars[\\"window_handles\\"]
  if len(wh_now) > len(wh_then):
  return set(wh_now).difference(set(wh_then)).pop()



    [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/    \${BROWSER}
    ...    AND    Set Selenium Speed    \${SELSPEED}
    Set Window Size    1260    1027
    Wait Until Element Is Visible    link:Multiple Windows    3000
    Click Element    link:Multiple Windows
    self.vars[\\"window_handles\\"] = self.driver.window_handles
    [object Object]
    self.vars[\\"win9625\\"] = self.wait_for_window(2000)
    \${root}=    Get Window Handles
    Log    \${root}
    Switch Window    \${win9625}
    assert self.driver.title == \\"New Window\\"
    Switch Window    \${root}
    assert self.driver.title == \\"The Internet\\"
"
`;

exports[`Code Export Python pytest should export a test with grid execution 1`] = `
"# Generated by JetRecord
*** Settings ***
Library           SeleniumLibrary

*** Variables ***
\${BROWSER}        chrome
\${SELSPEED}       0.0s

*** Test Cases ***
login


    [Setup]    Run Keywords    Open Browser    http://the-internet.herokuapp.com/login    \${BROWSER}
    ...    AND    Set Selenium Speed    \${SELSPEED}
    Set Window Size    1440    1177
    Wait Until Element Is Visible    id:username    3000
    Input Text    id:username    tomsmith
    Wait Until Element Is Visible    id:password    3000
    Input Text    id:password    SuperSecretPassword!
    Wait Until Element Is Visible    css:#login button    3000
    Click Element    css:#login button
    Wait Until Element Is Visible    css:.flash.success    3000
    Element Should Contain    css:.flash.success    You logged into a secure area!\\\\\\\\\\\\\\\\n×
"
`;
